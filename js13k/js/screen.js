// Generated by CoffeeScript 1.12.5
(function() {
  var Colours, Cursor, Screen;

  Colours = {
    BLACK: '#000000',
    WHITE: '#ffffff',
    RED: '#e32d2d',
    CYAN: '#2de3e3',
    PURPLE: '#b31de3',
    GREEN: '#2dc32d',
    BLUE: '#2d2de3',
    YELLOW: '#e3e32d'
  };

  Cursor = {
    x: 0,
    y: 0,
    visible: false,
    blinkTimer: null,
    blinkStateOn: true,
    show: function() {
      this.blinkTimer || (this.blinkTimer = setInterval(Cursor.blink, 500));
      this.visible = true;
      this.blinkStateOn = true;
      return this.draw();
    },
    hide: function() {
      clearInterval(this.blinkTimer);
      this.blinkTimer = null;
      this.blinkStateOn = false;
      this.draw();
      return this.visible = false;
    },
    blink: function() {
      Cursor.blinkStateOn = !Cursor.blinkStateOn;
      return Cursor.draw();
    },
    draw: function() {
      var colour;
      if (this.visible) {
        colour = this.blinkStateOn ? Screen.textColour : Screen.screenColour;
        return Screen.drawCharRect(Cursor.x, Cursor.y, colour);
      }
    },
    moveTo: function(newX, newY) {
      if (this.visible) {
        Screen.drawCharRect(Cursor.x, Cursor.y, Screen.screenColour);
      }
      Cursor.x = newX;
      Cursor.y = newY;
      return this.draw();
    },
    newLine: function() {
      return this.moveTo(0, Cursor.y + 1);
    }
  };

  Screen = {
    screenColour: Colours.WHITE,
    textColour: Colours.BLUE,
    colour2: Colours.YELLOW,
    colour3: Colours.RED,
    columnsWide: 22,
    rowsHigh: 23,
    pixelW: 5,
    pixelH: 3,
    init: function(pixelW, pixelH) {
      this.pixelW = pixelW;
      this.pixelH = pixelH;
      this.pixelD = Math.sqrt(this.pixelW * this.pixelW + this.pixelH * this.pixelH);
      this.canvas = document.getElementById('game');
      this.ctx = this.canvas.getContext("2d");
      this.setSize(this.columnsWide, this.rowsHigh);
      return this.clear();
    },
    clear: function() {
      this.ctx.fillStyle = this.screenColour;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      Cursor.x = 0;
      return Cursor.y = 0;
    },
    setBorder: function(colour) {
      return document.body.style.backgroundColor = colour;
    },
    setSize: function(newCols, newRows) {
      this.columnsWide = newCols;
      this.rowsHigh = newRows;
      this.canvas.width = this.columnsWide * 8 * this.pixelW;
      return this.canvas.height = this.rowsHigh * 8 * this.pixelH;
    },
    setCursor: function(col, row) {
      Cursor.x = col;
      return Cursor.y = row;
    },
    moveCursor: function() {
      var x, y;
      x = Cursor.x + 1;
      y = Cursor.y;
      if (x === this.columnsWide) {
        x = 0;
        y = Cursor.y + 1;
        if (y === this.rowsHigh) {
          y = 0;
        }
      }
      return Cursor.moveTo(x, y);
    },
    drawCharRect: function(x, y, colour) {
      this.ctx.fillStyle = colour;
      return this.ctx.fillRect(x * 8 * this.pixelW, y * 8 * this.pixelH, 8 * Screen.pixelW, 8 * Screen.pixelH);
    },
    drawCharAtCursor: function(charCode) {
      var char, x, y;
      char = charBytes[charCode];
      x = Cursor.x * 8 * this.pixelW;
      y = Cursor.y * 8 * this.pixelH;
      this.moveCursor();
      this.ctx.fillStyle = this.textColour;
      char.forEach(function(byte) {
        var i;
        i = 0;
        while (i < 8) {
          if (byte & Math.pow(2, 7 - i)) {
            Screen.ctx.fillRect(x + i * Screen.pixelW, y, Screen.pixelW, Screen.pixelH);
          }
          i++;
        }
        return y += Screen.pixelH;
      });
      return true;
    },
    print: function(text) {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = text.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.drawCharAtCursor(this.asciiToVic(text.charCodeAt(i))));
      }
      return results;
    },
    println: function(text) {
      this.print(text);
      return Cursor.newLine();
    },
    printAt: function(col, row, text) {
      Cursor.moveTo(col, row);
      return this.print(text);
    },
    asciiToVic: function(ascii) {
      return ascii;
    },
    drawSprite: function(x, y, sprite) {
      var bits, byte, byteStr, colour, i, j, k, l, len, len1, line, offset, ref, ref1;
      x = x * this.pixelW;
      y = y * this.pixelH;
      ref = sprite.trim().split("\n");
      for (j = 0, len = ref.length; j < len; j++) {
        line = ref[j];
        offset = 0;
        ref1 = line.match(/(..?)/g);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          byteStr = ref1[k];
          byte = parseInt(byteStr, 16);
          for (i = l = 0; l <= 3; i = ++l) {
            bits = byte & 0xc0;
            colour = bits === 0x0 ? null : bits === 0x40 ? this.textColour : bits === 0x80 ? this.colour2 : bits === 0xc0 ? this.colour3 : void 0;
            if (colour) {
              this.ctx.fillStyle = colour;
              this.ctx.fillRect(x + offset * Screen.pixelW, y, Screen.pixelW * 2, Screen.pixelH);
            }
            offset += 2;
            byte = byte << 2;
          }
        }
        y += Screen.pixelH;
      }
      return true;
    }
  };

  window.Screen = Screen;

  window.Colours = Colours;

  window.Cursor = Cursor;

}).call(this);

//# sourceMappingURL=screen.js.map
