// Generated by CoffeeScript 1.12.5
(function() {
  var Game, GameStates;

  GameStates = {
    PRE_LAUNCH: 0,
    TITLE_SCREEN: 1,
    PLAYING_IN_PLAY: 2,
    PLAYING_WARPING: 3,
    START_OF_LEVEL: 4,
    PLAYING_BETWEEN_LIVES: 5,
    GAME_OVER: 6
  };

  Game = {
    state: GameStates.PRE_LAUNCH,
    run: function() {
      this.ctx = Screen.ctx;
      this.canvas = Screen.canvas;
      Screen.setSize(25, 23);
      Screen.screenColour = Colours.BLACK;
      Screen.textColour = Colours.WHITE;
      Screen.setBorder(Colours.BLUE);
      Cursor.hide();
      addChars(48, astroDigits);
      this.showTitleScreen();
      return requestAnimationFrame(update);
    },
    update: function(timestamp) {
      var delta;
      if (this.lastTimestamp) {
        delta = (timestamp - this.lastTimestamp) / 1000;
      } else {
        delta = 0;
      }
      this.lastTimestamp = timestamp;
      if (this.state === GameStates.TITLE_SCREEN) {
        if (keysDown.fire) {
          return this.startGame();
        }
      } else if (this.state === GameStates.PLAYING || this.state === GameStates.PLAYING_WARPING || this.state === GameStates.GAME_OVER) {
        this.world.update(delta);
        return this.draw();
      }
    },
    draw: function() {
      var i, j, ref;
      if (this.state === GameStates.PLAYING_WARPING) {
        Screen.screenColour = Colours.PURPLE;
        Screen.clear();
        Screen.textColour = Colours.WHITE;
        Screen.printAt(5, 8, 'LEVEL 1 CLEARED');
        Screen.printAt(8, 10, 'WARPING ...');
        Screen.printAt(2, 14, 'Sorry, that\'s all I\'ve programmed for the moment');
        Screen.textColour = Colours.BLUE;
      } else if (this.state === GameStates.GAME_OVER) {
        Screen.textColour = Colours.WHITE;
        Screen.printAt(8, 8, 'GAME OVER');
        Screen.printAt(4, 10, 'Haven\'t programmed    ability to restart game  yet, so you\'re stuck on  this screen :)');
      } else {
        this.ctx.fillStyle = Colours.BLACK;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        Screen.textColour = Colours.WHITE;
      }
      Screen.printAt(1, 2, '' + this.score);
      Screen.printAt(12, 2, '' + this.level);
      for (i = j = 1, ref = this.livesLeft; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        Screen.printAt(24 - i, 2, '/');
      }
      return this.world.draw();
    },
    startGame: function() {
      this.state = GameStates.PLAYING;
      Screen.clear();
      Screen.printAt(8, 4, "Playing ...");
      this.score = 0;
      this.livesLeft = 4;
      this.level = 1;
      this.ship = new Ship();
      return this.world = new World(1, this.ship);
    },
    warpToNextWorld: function() {
      return this.state = GameStates.PLAYING_WARPING;
    },
    hLine: function(row) {
      return Screen.printAt(0, row, ';;;;;;;;;;;;;;;;;;;;;;;;;');
    },
    showTitleScreen: function() {
      this.state = GameStates.TITLE_SCREEN;
      Screen.clear();
      Screen.printAt(8, 4, "ASTROBLITZ");
      Screen.printAt(0, 6, "(C)1982 CREATIVE SOFTWARE");
      this.hLine(7);
      Screen.printAt(15, 9, "50");
      Screen.printAt(15, 12, "50");
      Screen.printAt(15, 15, "100");
      Screen.printAt(15, 18, "150");
      Screen.printAt(1, 10, "MOVE");
      Screen.printAt(1, 12, "OR");
      Screen.printAt(1, 16, "FIRE");
      this.hLine(20);
      this.hLine(22);
      Screen.textColour = Colours.YELLOW;
      Screen.printAt(3, 21, 'PRESS SPACE TO START');
      Screen.textColour = Colours.CYAN;
      Screen.printAt(1, 11, "^ _ $ %");
      Screen.printAt(1, 13, "W A S D");
      Screen.printAt(1, 17, "SPACE");
      Screen.textColour = Colours.BLUE;
      Screen.drawSprite(96, 71, ufo);
      Screen.drawSprite(96, 88, radar);
      Screen.drawSprite(96, 112, mine);
      return Screen.drawSprite(96, 140, guppie);
    }
  };

  window.update = function(timestamp) {
    Game.update(timestamp);
    if (window.paused) {
      console.log('Game is paused');
    } else {
      window.requestAnimationFrame(update);
    }
    return true;
  };

  window.keysDown = {
    left: false,
    right: false,
    up: false,
    down: false,
    fire: false
  };

  window.paused = false;

  window.keyToggled = function(keyCode, isPressed) {
    if (keyCode === 32) {
      window.keysDown.fire = isPressed;
    }
    if (keyCode === 38 || keyCode === 90 || keyCode === 87) {
      window.keysDown.up = isPressed;
    }
    if (keyCode === 39 || keyCode === 68) {
      window.keysDown.right = isPressed;
    }
    if (keyCode === 40 || keyCode === 83) {
      window.keysDown.down = isPressed;
    }
    if (keyCode === 37 || keyCode === 65 || keyCode === 81) {
      window.keysDown.left = isPressed;
    }
    if (keyCode === 66) {
      window.paused = isPressed;
      return console.log('Paused', window.paused);
    }
  };

  window.onkeydown = function(e) {
    return keyToggled(e.keyCode, true);
  };

  window.onkeyup = function(e) {
    return keyToggled(e.keyCode, false);
  };

  window.Game = Game;

  window.GameStates = GameStates;

}).call(this);

//# sourceMappingURL=game.js.map
