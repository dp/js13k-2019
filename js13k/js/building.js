// Generated by CoffeeScript 1.12.5
(function() {
  var Building, Radar;

  Building = (function() {
    function Building(x, y) {
      this.x = x;
      this.y = y;
      this.sprite = sprites.building;
      this.w = this.sprite.imageW;
      this.h = this.sprite.imageH;
      this.offsetX = this.w / -2;
      this.offsetY = -this.h;
      this.canBeDestroyed = false;
      this.hitbox = buildHitbox(this.offsetX, this.offsetY, 0, 0, 14, 32);
    }

    Building.prototype.draw = function(cameraOffsetX) {
      return this.sprite.draw(this.x + this.offsetX - cameraOffsetX, this.y + this.offsetY, false);
    };

    Building.prototype.update = function(delta) {
      return true;
    };

    return Building;

  })();

  Radar = (function() {
    function Radar(x, y) {
      this.x = x;
      this.y = y;
      this.sprite = sprites.radar;
      this.w = this.sprite.imageW;
      this.h = this.sprite.imageH;
      this.offsetX = this.w / -2;
      this.offsetY = -this.h;
      this.cooldown = Math.random() * 5;
      this.firePattern = [3, 0.5];
      this.patternIndex = 0;
      this.canBeDestroyed = true;
      this.points = 100;
      this.hitbox = buildHitbox(this.offsetX, this.offsetY, 0, 0, 16, 16);
    }

    Radar.prototype.draw = function(cameraOffsetX) {
      return this.sprite.draw(this.x + this.offsetX - cameraOffsetX, this.y + this.offsetY, false);
    };

    Radar.prototype.update = function(delta) {
      this.cooldown -= delta;
      if (this.cooldown < 0) {
        if (!this.offScreen) {
          this.fire();
        }
        this.patternIndex += 1;
        if (this.patternIndex === this.firePattern.length) {
          this.patternIndex = 0;
        }
        return this.cooldown = this.firePattern[this.patternIndex];
      }
    };

    Radar.prototype.fire = function() {
      var direction, i, len, ref, results, shotSpeed;
      shotSpeed = 50 * Screen.pixelD;
      ref = [Math.PI, -Math.PI / 2, 0];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        results.push(Game.world.getNextEnemyShot().fire(this.x - 3 * Screen.pixelW, this.y - 13 * Screen.pixelH, shotSpeed, direction));
      }
      return results;
    };

    return Radar;

  })();

  window.Building = Building;

  window.Radar = Radar;

}).call(this);

//# sourceMappingURL=building.js.map
