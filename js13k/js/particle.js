// Generated by CoffeeScript 1.12.5
(function() {
  var Particle;

  Particle = (function() {
    function Particle() {
      this.w = Screen.pixelW * 1.5;
      this.h = Screen.pixelH * 1.5;
      this.offsetX = this.w / -2;
      this.offsetY = this.h / -2;
      this.dead = true;
      this.maxLife = Math.random() + 2;
      this.colour = {};
      this.drag = 0.985;
    }

    Particle.prototype.fire = function(x, y, directionRad, speed, rgbValues) {
      this.x = x;
      this.y = y;
      directionRad += Math.random() / 10 - 0.05;
      speed *= 0.9 + Math.random() * 0.2;
      this.dead = false;
      this.offScreen = false;
      this.hSpeed = Math.cos(directionRad) * speed;
      this.vSpeed = Math.sin(directionRad) * speed;
      this.life = this.maxLife;
      return this.initColour(rgbValues);
    };

    Particle.prototype.draw = function(cameraOffsetX) {
      Screen.ctx.fillStyle = this.colour.hexString + this.colour.alphaHex;
      return Screen.ctx.fillRect(this.x + this.offsetX - cameraOffsetX, this.y + this.offsetY, this.w, this.h);
    };

    Particle.prototype.update = function(delta) {
      var alpha, ratio;
      this.hSpeed *= this.drag;
      this.vSpeed *= this.drag;
      this.x += this.hSpeed * delta;
      this.y += this.vSpeed * delta;
      this.life -= delta;
      if (this.life <= 0) {
        return this.dead = true;
      } else {
        ratio = this.life / this.maxLife;
        if (ratio < 0.5) {
          alpha = Math.round(ratio * 2 * 255).toString(16);
          if (alpha.length === 1) {
            alpha = '0' + alpha;
          }
          return this.colour.alphaHex = alpha;
        }
      }
    };

    Particle.prototype.initColour = function(rgbValues) {
      var b, g, r;
      r = rgbValues.r.toString(16);
      if (r.length === 1) {
        r = '0' + r;
      }
      g = rgbValues.g.toString(16);
      if (g.length === 1) {
        g = '0' + g;
      }
      b = rgbValues.b.toString(16);
      if (b.length === 1) {
        b = '0' + b;
      }
      this.colour.rgb = rgbValues;
      this.colour.hexString = '#' + r + g + b;
      return this.colour.alphaHex = 'ff';
    };

    return Particle;

  })();

  window.Particle = Particle;

}).call(this);

//# sourceMappingURL=particle.js.map
