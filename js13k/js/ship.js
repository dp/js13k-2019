// Generated by CoffeeScript 1.12.5
(function() {
  var PlayerShot, Ship;

  Ship = (function() {
    function Ship() {
      this.sprite = sprites.ship;
      this.w = this.sprite.imageW;
      this.h = this.sprite.imageH;
      this.offsetX = this.w / -2;
      this.offsetY = this.h / -2;
      this.x = 100;
      this.y = 100;
      this.facingLeft = false;
      this.maxVSpeed = 120 * Screen.pixelH;
      this.maxHSpeed = 180 * Screen.pixelW;
      this.vThrust = 3000;
      this.hThrust = 3000;
      this.vSpeed = 0;
      this.hSpeed = 0;
      this.minY = 18 * Screen.pixelH;
      this.maxY = 165 * Screen.pixelH;
      this.offScreen = false;
      this.dead = false;
      this.autopilot = false;
      this.invulnerable = false;
      this.warping = false;
      this.cooldown = 0.3;
      this.hitbox = buildHitbox(this.offsetX, this.offsetY, 1, 4, 30, 12);
    }

    Ship.prototype.update = function(delta) {
      if (this.cooldown > 0) {
        this.cooldown -= delta;
        if (this.cooldown < 0) {
          this.cooldown = 0;
        }
      }
      if (!this.warping) {
        this.y += this.vSpeed * delta;
        if (this.y < this.minY) {
          this.y = this.minY;
        }
        if (this.y > this.maxY) {
          this.y = this.maxY;
        }
        this.x += this.hSpeed * delta;
        if (!this.movingV) {
          this.vSpeed *= 0.8;
        }
        if (!this.movingH) {
          this.hSpeed *= 0.8;
        }
      }
      this.movingV = false;
      return this.movingH = false;
    };

    Ship.prototype.draw = function(cameraOffsetX) {
      return this.sprite.draw(this.x + this.offsetX - cameraOffsetX, this.y + this.offsetY, this.facingLeft);
    };

    Ship.prototype.moveV = function(delta, direction) {
      var target;
      if (this.warping) {
        target = Game.world.blockToPixelH(13);
        if (Math.abs(target - this.y) < 2) {
          return this.y = target;
        } else if (this.y > target) {
          return this.y -= 1;
        } else {
          return this.y += 1;
        }
      } else {
        this.vSpeed += this.vThrust * delta * direction;
        if (this.vSpeed > this.maxVSpeed) {
          this.vSpeed = this.maxVSpeed;
        } else if (this.vSpeed < -this.maxVSpeed) {
          this.vSpeed = -this.maxVSpeed;
        }
        return this.movingV = true;
      }
    };

    Ship.prototype.moveH = function(delta, direction) {
      if (this.warping) {
        this.x += delta * this.maxHSpeed * 5;
      } else {
        this.hSpeed += this.hThrust * delta * direction;
        if (this.hSpeed > this.maxHSpeed) {
          this.hSpeed = this.maxHSpeed;
        } else if (this.hSpeed < -this.maxHSpeed) {
          this.hSpeed = -this.maxHSpeed;
        }
        this.movingH = true;
      }
      return this.facingLeft = direction < 0;
    };

    Ship.prototype.switchDirection = function() {
      return this.facingLeft = !this.facingLeft;
    };

    Ship.prototype.fireShot = function() {
      var shotOffset, shotSpeed;
      if (this.warping) {
        return;
      }
      if (this.cooldown > 0) {
        return;
      }
      shotSpeed = 250 * Screen.pixelW;
      shotOffset = 14 * Screen.pixelW;
      if (this.facingLeft) {
        shotSpeed *= -1;
        shotOffset *= -1;
      }
      Game.world.getNextPlayerShot().fire(this.x + shotOffset, this.y + 2 * Screen.pixelH, shotSpeed);
      Game.shotsFired += 1;
      return this.cooldown = 0.2;
    };

    return Ship;

  })();

  PlayerShot = (function() {
    function PlayerShot() {
      this.sprite = sprites.playerShot;
      this.w = this.sprite.imageW;
      this.h = this.sprite.imageH;
      this.offsetX = this.w / -2;
      this.offsetY = this.h / -2;
      this.dead = true;
      this.hitbox = buildHitbox(this.offsetX, this.offsetY, 2, -4, 14, 6);
    }

    PlayerShot.prototype.fire = function(x, y, hSpeed) {
      this.x = x;
      this.y = y;
      this.hSpeed = hSpeed;
      this.dead = false;
      this.offScreen = false;
      return this.facingLeft = this.hSpeed < 0;
    };

    PlayerShot.prototype.draw = function(cameraOffsetX) {
      return this.sprite.draw(this.x + this.offsetX - cameraOffsetX, this.y + this.offsetY, this.facingLeft);
    };

    PlayerShot.prototype.update = function(delta) {
      this.x += this.hSpeed * delta;
      if (this.offScreen) {
        return this.dead = true;
      }
    };

    return PlayerShot;

  })();

  window.Ship = Ship;

  window.PlayerShot = PlayerShot;

}).call(this);

//# sourceMappingURL=ship.js.map
